{
  "name": "@bobmatnyc/claude-multiagent-pm",
  "version": "0.8.0",
  "description": "Claude Multi-Agent PM Framework - Pure Python implementation with Click-based CLI and enhanced flags system",
  "main": "bin/claude-pm",
  "bin": {
    "claude-pm": "./bin/claude-pm"
  },
  "keywords": [
    "claude",
    "project-management",
    "ai-orchestration",
    "subprocess-coordination",
    "development-framework",
    "automation",
    "trackdown",
    "ai-trackdown-tools",
    "task-management",
    "issue-tracking",
    "pr-management",
    "best-practices",
    "tdd",
    "api-first",
    "npm-package",
    "python-cli",
    "click-framework",
    "pure-python",
    "cli-tool",
    "unified-installation",
    "cross-platform",
    "installation-validation"
  ],
  "author": {
    "name": "Robert (Masa) Matsuoka",
    "email": "masa@matsuoka.com",
    "url": "https://github.com/matsuoka"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/bobmatnyc/claude-multiagent-pm.git"
  },
  "bugs": {
    "url": "https://github.com/bobmatnyc/claude-multiagent-pm/issues"
  },
  "homepage": "https://github.com/bobmatnyc/claude-multiagent-pm#readme",
  "engines": {
    "node": ">=16.0.0",
    "python": ">=3.8.0"
  },
  "os": [
    "darwin",
    "linux",
    "win32"
  ],
  "cpu": [
    "x64",
    "arm64"
  ],
  "scripts": {
    "start": "python3 -m claude_pm.cli",
    "postinstall": "node install/postinstall-minimal.js",
    "install:unified": "node install/postinstall-minimal.js",
    "install:validate": "node install/validate.js --comprehensive",
    "install:health-check": "node -e \"const fs = require('fs'); const path = require('path'); const home = require('os').homedir(); const healthPath = path.join(home, '.claude-pm', 'health-check.json'); if (fs.existsSync(healthPath)) { console.log(JSON.stringify(JSON.parse(fs.readFileSync(healthPath, 'utf8')), null, 2)); } else { console.log('Health check not available - run claude-pm init'); }\"",
    "install:dependencies": "node -e \"const { execSync } = require('child_process'); const pythonCmds = ['python3', 'python']; let pythonCmd = null; for (const cmd of pythonCmds) { try { const version = execSync(cmd + ' --version', { encoding: 'utf8', stdio: 'pipe' }); if (version.includes('Python 3.')) { pythonCmd = cmd; break; } } catch {} } if (!pythonCmd) { console.error('‚ùå Python 3.8+ not found'); process.exit(1); } console.log('üêç Installing Python dependencies...'); const deps = ['click>=8.1.0', 'rich>=13.7.0']; for (const dep of deps) { try { execSync(pythonCmd + ' -m pip install --user ' + dep, { stdio: 'pipe' }); console.log('   ‚úÖ ' + dep + ' installed'); } catch (error) { const stderr = error.stderr ? error.stderr.toString() : ''; if (stderr.includes('externally-managed-environment') || stderr.includes('externally managed')) { console.log('   Retrying with --break-system-packages for ' + dep + '...'); try { execSync(pythonCmd + ' -m pip install --user --break-system-packages ' + dep, { stdio: 'pipe' }); console.log('   ‚úÖ ' + dep + ' installed'); } catch (retryError) { console.error('   ‚ùå Failed to install ' + dep + ':', retryError.message); } } else { console.error('   ‚ùå Failed to install ' + dep + ':', error.message); } } } console.log('‚úÖ Python dependency installation completed');\"",
    "install:diagnostics": "node -e \"const fs = require('fs'); const path = require('path'); const home = require('os').homedir(); const diagPath = path.join(home, '.claude-pm', 'installation-diagnostics.json'); if (fs.existsSync(diagPath)) { console.log(JSON.stringify(JSON.parse(fs.readFileSync(diagPath, 'utf8')), null, 2)); } else { console.log('Diagnostics not available - run npm run install:unified'); }\"",
    "install:report": "node -e \"const fs = require('fs'); const path = require('path'); const home = require('os').homedir(); const reportPath = path.join(home, '.claude-pm', 'installation-report.md'); if (fs.existsSync(reportPath)) { console.log(fs.readFileSync(reportPath, 'utf8')); } else { console.log('Installation report not available - run npm run install:unified'); }\"",
    "test:unified-installation": "node install/test-unified-installation.js",
    "prepublishOnly": "npm run pre-publish:no-docker",
    "ai-trackdown-setup": "npm install -g @bobmatnyc/ai-trackdown-tools",
    "verify-dependencies": "aitrackdown --version && atd --version",
    "test": "node install/validate.js --verbose",
    "validate-env": "node install/validate.js",
    "install-to": "node install/install.js",
    "deploy": "node install/deploy.js",
    "deploy:verbose": "node install/deploy.js --verbose",
    "deploy:dry-run": "node install/deploy.js --dry-run --verbose",
    "validate-deployment": "node install/validate-deployment.js",
    "health-check": "./trackdown/scripts/health-check.sh",
    "fix-npm-deployment": "node scripts/fix_npm_deployment.js",
    "monitor:health": "node scripts/automated-health-monitor.js monitor",
    "monitor:once": "node scripts/automated-health-monitor.js once",
    "monitor:status": "node scripts/automated-health-monitor.js status",
    "monitor:reports": "node scripts/automated-health-monitor.js reports",
    "monitor:alerts": "node scripts/automated-health-monitor.js alerts",
    "monitor:verbose": "node scripts/automated-health-monitor.js once --verbose",
    "monitor:background": "node scripts/automated-health-monitor.js monitor --interval=10",
    "monitor:setup": "./scripts/setup-health-monitoring.sh",
    "monitor:health-manager": "NODE_OPTIONS='--max-old-space-size=4096 --expose-gc' node scripts/process-health-manager.js",
    "monitor:leak-detection": "NODE_OPTIONS='--max-old-space-size=4096 --expose-gc' node scripts/memory-leak-detector.js",
    "monitor:history-tracking": "NODE_OPTIONS='--max-old-space-size=4096 --expose-gc' node scripts/memory-history-tracker.js",
    "docker:validate": "node scripts/pre-publish-docker-validation.js",
    "docker:validate:verbose": "node scripts/pre-publish-docker-validation.js --verbose",
    "docker:validate:dry-run": "node scripts/pre-publish-docker-validation.js --dry-run --verbose",
    "docker:quick-test": "./scripts/docker-validation-helper.sh quick-test",
    "docker:build-env": "./scripts/docker-validation-helper.sh build-env",
    "docker:clean": "./scripts/docker-validation-helper.sh clean",
    "docker:status": "./scripts/docker-validation-helper.sh status",
    "docker:debug": "./scripts/docker-validation-helper.sh debug",
    "pre-publish": "./scripts/docker-validation-helper.sh pre-publish --verbose",
    "pre-publish:quick": "npm run docker:quick-test && npm run test",
    "pre-publish:full": "npm run pre-publish",
    "pre-publish:validation": "node scripts/comprehensive-pre-publish-validation.js",
    "pre-publish:standard": "npm run test && npm run validate-deployment && echo '‚úÖ Standard pre-publish validation completed'",
    "pre-publish:comprehensive": "node scripts/comprehensive-pre-publish-validation.js --verbose",
    "pre-publish:no-docker": "node scripts/comprehensive-pre-publish-validation.js --skip-docker",
    "release": "standard-version",
    "release:major": "standard-version --release-as major",
    "release:minor": "standard-version --release-as minor",
    "release:patch": "standard-version --release-as patch"
  },
  "files": [
    "bin/",
    "install/",
    "claude_pm/",
    "config/",
    "requirements/",
    "schemas/",
    "templates/",
    "framework/",
    "docs/",
    "scripts/",
    "README.md",
    "CHANGELOG.md",
    "LICENSE"
  ],
  "dependencies": {
    "@bobmatnyc/ai-trackdown-tools": "^1.1.2",
    "@bobmatnyc/claude-multiagent-pm": "file:bobmatnyc-claude-multiagent-pm-0.7.5.tgz"
  },
  "devDependencies": {
    "standard-version": "^9.5.0"
  },
  "standard-version": {
    "types": [
      {
        "type": "feat",
        "section": "Features"
      },
      {
        "type": "fix",
        "section": "Bug Fixes"
      },
      {
        "type": "docs",
        "section": "Documentation"
      },
      {
        "type": "framework",
        "section": "Framework"
      },
      {
        "type": "chore",
        "hidden": true
      },
      {
        "type": "style",
        "hidden": true
      },
      {
        "type": "refactor",
        "section": "Code Refactoring"
      },
      {
        "type": "perf",
        "section": "Performance Improvements"
      },
      {
        "type": "test",
        "hidden": true
      }
    ]
  }
}
