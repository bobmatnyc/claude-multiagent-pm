# Example GitHub Actions Workflow for Refactoring Validation
# Copy this to .github/workflows/refactoring-validation.yml

name: Refactoring Validation

on:
  pull_request:
    paths:
      - 'claude_pm/**/*.py'
      - 'tests/**/*.py'

jobs:
  validate-refactoring:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Need full history for git diff
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/base.txt
        pip install -r requirements/development.txt
        pip install -r tests/refactoring_harness/requirements.txt
    
    - name: Run Refactoring Validation
      run: |
        bash tests/refactoring_harness/ci_integration.sh
    
    - name: Upload Test Reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: refactoring-reports
        path: |
          tests/refactoring_harness/reports/
          tests/refactoring_harness/snapshots/
          tests/refactoring_harness/benchmarks/
    
    - name: Comment PR with Results
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read the most recent validation report
          const reportDir = 'tests/refactoring_harness/reports/';
          const files = fs.readdirSync(reportDir);
          const validationReports = files.filter(f => f.startsWith('validation_report_'));
          
          if (validationReports.length > 0) {
            const latestReport = validationReports.sort().pop();
            const reportContent = fs.readFileSync(`${reportDir}/${latestReport}`, 'utf8');
            
            // Extract summary
            const summaryMatch = reportContent.match(/## Summary\n\n([\s\S]*?)\n\n##/);
            const summary = summaryMatch ? summaryMatch[1] : 'No summary available';
            
            // Create comment
            const comment = `## üîç Refactoring Validation Results
            
${summary}

<details>
<summary>View Full Report</summary>

\`\`\`markdown
${reportContent}
\`\`\`

</details>

üìÑ Full reports are available as artifacts in this workflow run.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }