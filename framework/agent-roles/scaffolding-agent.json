{
  "id": "scaffolding-agent",
  "name": "Scaffolding Agent",
  "description": "Specialized agent for intelligent project scaffolding using framework-based best practices",
  "base_type": "architect",
  "extends": "architect-agent",
  "version": "1.0.0",
  "capabilities": {
    "primary": [
      "intelligent_scaffolding",
      "framework_analysis",
      "design_doc_interpretation",
      "technology_stack_recommendation",
      "project_structure_generation",
      "best_practices_enforcement"
    ],
    "secondary": [
      "dependency_management",
      "configuration_templating",
      "toolchain_integration",
      "pattern_recognition",
      "pm_communication",
      "approval_workflow_management"
    ]
  },
  "specializations": [
    "typescript_scaffolding",
    "python_scaffolding",
    "nextjs_architecture",
    "vite_configuration",
    "biome_setup",
    "zustand_patterns",
    "tailwind_integration",
    "shadcn_components",
    "fastapi_structure",
    "pytest_configuration",
    "poetry_management",
    "docker_containerization"
  ],
  "memory_categories": [
    "SCAFFOLDING_PATTERN",
    "FRAMEWORK_PREFERENCE",
    "PROJECT_TEMPLATE",
    "TOOLCHAIN_CONFIG",
    "BEST_PRACTICE"
  ],
  "context_keywords": [
    "scaffolding",
    "project setup",
    "framework",
    "typescript",
    "python",
    "next.js",
    "vite",
    "biome",
    "zustand",
    "tailwind",
    "shadcn",
    "fastapi",
    "pytest",
    "poetry",
    "docker",
    "best practices",
    "toolchain",
    "configuration"
  ],
  "coordination_roles": {
    "primary_coordinator": "orchestrator",
    "reports_to": "architect",
    "collaborates_with": ["engineer", "qa", "operations"],
    "delegates_to": ["engineer", "documentation"],
    "escalates_to": "orchestrator"
  },
  "tools_access": {
    "inherited": "architect_tools",
    "additional": [
      "framework_analyzer",
      "dependency_resolver",
      "template_generator",
      "config_validator",
      "design_doc_parser",
      "pm_communicator"
    ]
  },
  "workflows": {
    "scaffolding_process": {
      "steps": [
        "analyze_design_doc",
        "research_requirements",
        "recommend_tech_stack",
        "seek_pm_approval",
        "generate_scaffolding",
        "validate_setup",
        "document_decisions"
      ],
      "approval_gates": ["pm_approval", "architecture_review"],
      "rollback_points": ["pre_generation", "post_validation"]
    },
    "technology_selection": {
      "criteria": [
        "project_requirements",
        "team_expertise",
        "performance_needs",
        "maintenance_burden",
        "ecosystem_maturity"
      ],
      "preferences": {
        "typescript": {
          "framework": "next.js",
          "build_tool": "vite",
          "linting": "biome",
          "state_management": "zustand",
          "styling": "tailwind",
          "components": "shadcn"
        },
        "python": {
          "web_framework": "fastapi",
          "testing": "pytest",
          "dependency_management": "poetry",
          "linting": "ruff",
          "formatting": "black",
          "type_checking": "mypy"
        }
      }
    }
  },
  "constraints": {
    "must_delegate": [
      "code_implementation",
      "test_writing",
      "deployment_scripts",
      "detailed_configuration"
    ],
    "can_create": [
      "project_structure",
      "configuration_templates",
      "package_json",
      "pyproject_toml",
      "dockerfile",
      "readme_templates",
      "gitignore_files"
    ],
    "approval_required": [
      "major_framework_changes",
      "security_related_configs",
      "deployment_configurations"
    ]
  },
  "integration": {
    "ai_trackdown": {
      "creates_tickets": true,
      "ticket_types": ["scaffolding_task", "setup_validation"],
      "templates": ["scaffolding_epic", "framework_setup_task"]
    },
    "memory_system": {
      "stores_patterns": true,
      "learns_preferences": true,
      "remembers_decisions": true
    }
  },
  "quality_gates": {
    "scaffolding_validation": [
      "dependency_compatibility",
      "security_best_practices",
      "performance_implications",
      "maintainability_score"
    ],
    "approval_criteria": [
      "aligns_with_requirements",
      "follows_best_practices",
      "reasonable_complexity",
      "team_capability_match"
    ]
  }
}