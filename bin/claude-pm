#!/usr/bin/env node

/**
 * Claude Multi-Agent PM Framework - Universal CLI Entry Point
 * 
 * ISS-0085 Phase 3: Cleaned modular architecture with redundant code removed
 * Delegates heavy functionality to Phase 2 modules while maintaining essential
 * fallback mechanisms and entry point logic.
 */

const fs = require('fs');
const path = require('path');
const os = require('os');
const { spawn } = require('child_process');

// ISS-0113 Enhanced Flag System Integration
const { CliIntegration } = require('../lib/cli-flag-managers/cli-integration');

// Universal version resolution for all deployment scenarios
function resolveVersion() {
    const fs = require('fs');
    const path = require('path');
    
    // Strategy 1: Try to find package.json relative to this script
    const packagePaths = [
        path.join(__dirname, '../package.json'),
        path.join(__dirname, '../../package.json'),
        path.join(__dirname, '../../../package.json')
    ];
    
    for (const packagePath of packagePaths) {
        try {
            if (fs.existsSync(packagePath)) {
                const pkg = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
                if (pkg.name === '@bobmatnyc/claude-multiagent-pm' && pkg.version) {
                    return pkg.version;
                }
            }
        } catch (e) {
            // Continue to next path
        }
    }
    
    // Strategy 2: Try VERSION file (source development scenario)
    const versionPaths = [
        path.join(__dirname, '../VERSION'),
        path.join(__dirname, '../../VERSION')
    ];
    
    for (const versionPath of versionPaths) {
        try {
            if (fs.existsSync(versionPath)) {
                return fs.readFileSync(versionPath, 'utf8').trim();
            }
        } catch (e) {
            // Continue to next path
        }
    }
    
    // Strategy 3: Check for NPM package in node_modules
    try {
        const nodeModulesPaths = [
            path.join(process.cwd(), 'node_modules', '@bobmatnyc', 'claude-multiagent-pm', 'package.json'),
            path.join(process.cwd(), '..', 'node_modules', '@bobmatnyc', 'claude-multiagent-pm', 'package.json')
        ];
        
        for (const npmPackagePath of nodeModulesPaths) {
            if (fs.existsSync(npmPackagePath)) {
                const pkg = JSON.parse(fs.readFileSync(npmPackagePath, 'utf8'));
                if (pkg.name === '@bobmatnyc/claude-multiagent-pm' && pkg.version) {
                    return pkg.version;
                }
            }
        }
    } catch (e) {
        // Continue to fallback
    }
    
    // If all strategies fail, throw error with helpful message
    throw new Error(
        'Could not resolve Claude PM Framework version. ' +
        'This may indicate a corrupted installation or unsupported deployment scenario. ' +
        'Please reinstall using: npm install -g @bobmatnyc/claude-multiagent-pm'
    );
}

const CLAUDE_PM_VERSION = resolveVersion();

/**
 * Lightweight deployment detection - main functionality delegated to deployment-detector module
 */
function getBasicDeploymentInfo() {
    const scriptDir = __dirname;
    const sourceRoot = path.join(scriptDir, '..');
    
    // Quick check for source development
    if (fs.existsSync(path.join(sourceRoot, 'claude_pm')) && 
        fs.existsSync(path.join(sourceRoot, 'package.json'))) {
        return {
            type: 'source',
            frameworkPath: sourceRoot,
            scriptPath: scriptDir
        };
    }
    
    // Quick check for npm installation
    if (scriptDir.includes('node_modules')) {
        return {
            type: 'npm',
            frameworkPath: sourceRoot,
            scriptPath: scriptDir
        };
    }
    
    // Fallback
    return {
        type: 'unknown',
        frameworkPath: scriptDir,
        scriptPath: scriptDir
    };
}

/**
 * Legacy function for compatibility - functionality delegated to modules
 */
function getFrameworkPath() {
    const deploymentInfo = getBasicDeploymentInfo();
    return deploymentInfo.frameworkPath;
}

/**
 * Legacy function for compatibility - functionality delegated to modules
 */
function getDeploymentConfig() {
    const deploymentDetector = { getDeploymentStrategy: () => ({ config: getBasicDeploymentInfo() }) };
    return deploymentDetector.getDeploymentStrategy();
}

/**
 * Simplified platform detection - main functionality delegated to framework-manager module
 */
function detectPlatformInfo() {
    const platform = os.platform();
    const isWSL2 = process.env.WSL_DISTRO_NAME || 
                   (platform === 'linux' && fs.existsSync('/proc/version') && 
                    fs.readFileSync('/proc/version', 'utf8').includes('microsoft'));
    
    return {
        platform,
        isWSL2,
        arch: os.arch(),
        nodeVersion: process.version
    };
}

/**
 * Essential utility functions kept for fallback scenarios
 */
function getNpmGlobalBin() {
    try {
        const { execSync } = require('child_process');
        return execSync('npm bin -g', { encoding: 'utf8', timeout: 5000 }).trim();
    } catch (error) {
        return null;
    }
}

/**
 * Simplified help display - main functionality delegated to command-dispatcher module
 */
function showHelp() {
    console.log(`
Claude Multi-Agent PM Framework v${CLAUDE_PM_VERSION}
Universal CLI for Claude-powered project management and task orchestration

üöÄ USAGE:
  claude-pm [command] [options]

üìã COMMANDS:
  --version, -v            Show version information
  --help, -h              Show this help message
  --system-info           Display comprehensive system information
  --deployment-info       Show deployment detection results

‚ö° YOLO Mode (Default):
  claude-pm               Launch Claude CLI directly (YOLO mode - fast startup)

üö® TROUBLESHOOTING:
  ‚Ä¢ Environment Issues: claude-pm --system-info
  ‚Ä¢ Deployment Problems: claude-pm --deployment-info

üìñ DOCUMENTATION:
  ‚Ä¢ GitHub: https://github.com/bobmatnyc/claude-multiagent-pm

---
Made with ‚ù§Ô∏è  for AI-powered development workflows
`);
}

/**
 * Basic system info display - comprehensive functionality delegated to framework-manager module
 */
function displayBasicSystemInfo() {
    const deploymentInfo = getBasicDeploymentInfo();
    const platformInfo = detectPlatformInfo();
    
    console.log('üñ•Ô∏è  Claude Multi-Agent PM Framework System Information');
    console.log('=' .repeat(60));
    console.log(`üì¶ Framework Version: v${CLAUDE_PM_VERSION}`);
    console.log(`üóÇÔ∏è  Deployment Type: ${deploymentInfo.type}`);
    console.log(`üìÅ Framework Path: ${deploymentInfo.frameworkPath}`);
    console.log(`üîß Platform: ${platformInfo.platform} (${platformInfo.arch})`);
    console.log(`‚öôÔ∏è  Node.js: ${platformInfo.nodeVersion}`);
    if (platformInfo.isWSL2) {
        console.log('üêß WSL2 Environment detected');
    }
    console.log('');
}

/**
 * Minimal Claude CLI validator for fallback scenarios
 */
class BasicClaudeValidator {
    async validateEnvironment() {
        try {
            const { execSync } = require('child_process');
            const version = execSync('claude --version', { encoding: 'utf8', timeout: 5000 }).trim();
            return {
                valid: true,
                version: version.replace(/[^\d.]/g, ''),
                command: ['claude']
            };
        } catch (error) {
            return {
                valid: false,
                error: error.message,
                command: ['claude']
            };
        }
    }

    displayErrorGuidance(validation) {
        console.error('‚ùå Claude CLI validation failed');
        console.error(`   Error: ${validation.error}`);
        console.error('');
        console.error('üîß Solutions:');
        console.error('   ‚Ä¢ Install Claude CLI: https://claude.ai/download');
        console.error('   ‚Ä¢ Add Claude CLI to your PATH');
        console.error('   ‚Ä¢ Restart your terminal');
        console.error('');
    }
}

/**
 * Streamlined main function - most functionality delegated to command-dispatcher module
 */
async function main() {
    const args = process.argv.slice(2);
    
    // Basic memory monitoring for fallback scenarios
    const memoryThreshold = 3.5 * 1024 * 1024 * 1024; // 3.5GB
    const checkMemory = () => {
        const usage = process.memoryUsage();
        if (usage.heapUsed > memoryThreshold) {
            console.error(`‚ùå Memory usage critical: ${Math.round(usage.heapUsed / 1024 / 1024)}MB`);
            if (global.gc) global.gc();
            return true;
        }
        return false;
    };
    
    // Handle special flags (delegated to command-dispatcher in modular mode)
    if (args.includes('--version') || args.includes('-v')) {
        console.log(`Claude Multi-Agent PM Framework v${CLAUDE_PM_VERSION}`);
        process.exit(0);
    }
    
    if (args.includes('--help') || args.includes('-h')) {
        showHelp();
        process.exit(0);
    }
    
    if (args.includes('--system-info')) {
        displayBasicSystemInfo();
        process.exit(0);
    }
    
    if (args.includes('--deployment-info')) {
        const deploymentInfo = getBasicDeploymentInfo();
        console.log('\nüîç Basic Deployment Detection Results:');
        console.log('=' .repeat(60));
        console.log(JSON.stringify(deploymentInfo, null, 2));
        process.exit(0);
    }
    
    // Handle no arguments case - YOLO mode (direct launch, skip system info)
    if (args.length === 0) {
        try {
            const claudeValidator = new BasicClaudeValidator();
            
            const validation = await claudeValidator.validateEnvironment();
            
            if (!validation.valid) {
                console.error('‚ùå Claude CLI validation failed');
                claudeValidator.displayErrorGuidance(validation);
                process.exit(1);
            }
            
            // YOLO mode: Launch Claude CLI directly without verbose output
            const claudeProcess = spawn(validation.command[0], validation.command.slice(1), {
                stdio: 'inherit'
            });
            
            claudeProcess.on('close', (code) => {
                process.exit(code);
            });
            
            claudeProcess.on('error', (error) => {
                console.error('‚ùå Failed to launch Claude:', error.message);
                const platformInfo = detectPlatformInfo();
                
                if (platformInfo.isWSL2 && error.message.includes('ENOENT')) {
                    console.error('üêß WSL2 Environment Detected - PATH Issue Likely');
                    console.error('üöÄ Quick WSL2 Fix:');
                    const npmGlobalBin = getNpmGlobalBin();
                    if (npmGlobalBin) {
                        console.error(`   export PATH="${npmGlobalBin}:$PATH"`);
                    } else {
                        console.error('   export PATH="$(npm bin -g):$PATH"');
                    }
                    console.error('   source ~/.bashrc');
                }
                
                console.error('üîß General Solutions:');
                console.error('   ‚Ä¢ Install Claude CLI: https://claude.ai/download');
                console.error('   ‚Ä¢ Add Claude CLI to your PATH');
                console.error('   ‚Ä¢ Restart your terminal');
                process.exit(1);
            });
            
            return;
        } catch (error) {
            console.error('‚ùå Failed to launch Claude:', error.message);
            process.exit(1);
        }
    }
    
    // For all other commands, delegate to Python framework
    const deploymentInfo = getBasicDeploymentInfo();
    const frameworkPath = deploymentInfo.frameworkPath;
    const pythonCmd = 'python3';
    
    checkMemory();
    
    const pythonProcess = spawn(pythonCmd, ['-m', 'claude_pm.cli', ...args], {
        cwd: frameworkPath,
        stdio: 'inherit'
    });
    
    pythonProcess.on('close', (code) => {
        process.exit(code);
    });
    
    pythonProcess.on('error', (error) => {
        console.error('‚ùå Failed to execute Claude PM Framework:', error.message);
        console.error(`   Framework path: ${frameworkPath}`);
        console.error(`   Python command: ${pythonCmd}`);
        process.exit(1);
    });
}

/**
 * ISS-0113 Enhanced Flag System Integration
 * Handles enhanced flags before delegating to original logic
 */
async function executeWithEnhancedFlags() {
    try {
        const args = process.argv.slice(2);
        
        // Check if enhanced flags are present - if not, skip enhanced integration
        const enhancedFlags = ['--save', '--upgrade', '--rollback', '--verify', '--components', '--environment', '--git', '--dependencies'];
        const hasEnhancedFlags = enhancedFlags.some(flag => args.includes(flag)) ||
            (args.includes('--version') && enhancedFlags.some(flag => args.includes(flag))) ||
            args.some(arg => arg.startsWith('--format='));
        
        if (!hasEnhancedFlags) {
            // No enhanced flags, delegate to modular support
            return await executeWithModularSupport();
        }
        
        const cliIntegration = new CliIntegration({
            verboseMode: process.argv.includes('--verbose') || process.argv.includes('--debug')
        });
        
        return await cliIntegration.execute();
    } catch (error) {
        console.error('‚ùå Enhanced flag integration failed:', error.message);
        // Fallback to original execution
        return await executeWithModularSupport();
    }
}

/**
 * ISS-0085 Phase 2: Modular execution with fallback
 * Primary execution path using Phase 2 modules with graceful fallback to monolithic main()
 */
async function executeWithModularSupport() {
    // Try Phase 2 modular execution first
    try {
        const modulePath = path.join(__dirname, '..', 'lib', 'cli-modules');
        
        if (fs.existsSync(path.join(modulePath, 'module-integration-phase2.js'))) {
            console.log('üîß Loading Phase 2 modular architecture...');
            
            const { createModularMain } = require(path.join(modulePath, 'module-integration-phase2.js'));
            const modularMain = createModularMain();
            
            const result = await modularMain();
            
            if (result && result.fallbackMode) {
                console.log('‚ö†Ô∏è  Modular system initialization failed, using monolithic fallback');
                return await main();
            }
            
            // Successful modular execution
            return typeof result === 'number' ? result : 0;
        } else {
            console.log('üìÑ Phase 2 modules not available, using monolithic execution');
            return await main();
        }
    } catch (error) {
        console.log(`‚ö†Ô∏è  Modular execution error: ${error.message}`);
        console.log('‚ö†Ô∏è  Falling back to monolithic execution');
        return await main();
    }
}

/**
 * Entry point with error handling
 */
async function run() {
    try {
        await executeWithEnhancedFlags();
    } catch (error) {
        console.error('‚ùå Fatal error:', error.message);
        process.exit(1);
    }
}

// Execute main entry point
if (require.main === module) {
    run();
}

// Module exports for compatibility
module.exports = {
    CLAUDE_PM_VERSION,
    resolveVersion,
    getBasicDeploymentInfo,
    getFrameworkPath,
    getDeploymentConfig,
    detectPlatformInfo,
    main,
    executeWithModularSupport,
    executeWithEnhancedFlags
};